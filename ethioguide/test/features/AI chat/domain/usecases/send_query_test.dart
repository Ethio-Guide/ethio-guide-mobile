import 'package:dartz/dartz.dart';
import 'package:ethioguide/core/error/failures.dart';
import 'package:ethioguide/features/AI%20chat/Domain/entities/conversation.dart';
import 'package:ethioguide/features/AI%20chat/Domain/repository/ai_repository.dart';
import 'package:ethioguide/features/AI%20chat/Domain/usecases/send_query.dart';
import 'package:flutter_test/flutter_test.dart';
import 'package:mockito/annotations.dart';
import 'package:mockito/mockito.dart';

@GenerateMocks([AiRepository])
import 'send_query_test.mocks.dart'; // Generated by mockito

void main() {
  late SendQuery usecase;
  late MockAiRepository mockAiRepository;

  setUp(() {
    mockAiRepository = MockAiRepository();
    usecase = SendQuery(repository: mockAiRepository);
  });

  final String tQuery = 'How to get a passport';
  final tConversation = Conversation(
    request: tQuery,
    response: 'Steps to get a Passport...',
    source: 'official',
    procedures: [Procedure(id: '1', name: 'Passport Application')],
  );

  test('should get conversation from repository if successful', () async {
    // Arrange
    when(
      mockAiRepository.sendQuery(tQuery),
    ).thenAnswer((_) async => Right(tConversation));

    // Act
    final result = await usecase(tQuery);

    // Assert
    expect(result, Right(tConversation));
    verify(mockAiRepository.sendQuery(tQuery));
    verifyNoMoreInteractions(mockAiRepository);
  });

  test('should get a failure from repository if uncessful', () async {
    // Arrange
    when(
      mockAiRepository.sendQuery(tQuery),
    ).thenAnswer((_) async => Left(Failure()));

    // Act
    final result = await usecase(tQuery);

    // Assert
    expect(result, Left(Failure()));
    verify(mockAiRepository.sendQuery(tQuery));
    verifyNoMoreInteractions(mockAiRepository);
  });
}
