// Mocks generated by Mockito 5.4.6 from annotations
// in ethioguide/test/features/AI%20chat/presentation/bloc/ai_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:ethioguide/core/error/failures.dart' as _i6;
import 'package:ethioguide/features/AI%20chat/Domain/entities/conversation.dart'
    as _i7;
import 'package:ethioguide/features/AI%20chat/Domain/repository/ai_repository.dart'
    as _i2;
import 'package:ethioguide/features/AI%20chat/Domain/usecases/get_history.dart'
    as _i8;
import 'package:ethioguide/features/AI%20chat/Domain/usecases/send_query.dart'
    as _i4;
import 'package:ethioguide/features/AI%20chat/Domain/usecases/translate_content.dart'
    as _i9;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAiRepository_0 extends _i1.SmartFake implements _i2.AiRepository {
  _FakeAiRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [SendQuery].
///
/// See the documentation for Mockito's code generation for more information.
class MockSendQuery extends _i1.Mock implements _i4.SendQuery {
  MockSendQuery() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AiRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAiRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AiRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Conversation>> call(String? query) =>
      (super.noSuchMethod(
            Invocation.method(#call, [query]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.Conversation>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Conversation>(
                    this,
                    Invocation.method(#call, [query]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Conversation>>);
}

/// A class which mocks [GetHistory].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHistory extends _i1.Mock implements _i8.GetHistory {
  MockGetHistory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AiRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAiRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AiRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Conversation>>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<
                  _i3.Either<_i6.Failure, List<_i7.Conversation>>
                >.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Conversation>>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Conversation>>>);
}

/// A class which mocks [TranslateContent].
///
/// See the documentation for Mockito's code generation for more information.
class MockTranslateContent extends _i1.Mock implements _i9.TranslateContent {
  MockTranslateContent() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AiRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAiRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AiRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, String>> call({
    required String? content,
    required String? lang,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {#content: content, #lang: lang}),
            returnValue: _i5.Future<_i3.Either<_i6.Failure, String>>.value(
              _FakeEither_1<_i6.Failure, String>(
                this,
                Invocation.method(#call, [], {#content: content, #lang: lang}),
              ),
            ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, String>>);
}
