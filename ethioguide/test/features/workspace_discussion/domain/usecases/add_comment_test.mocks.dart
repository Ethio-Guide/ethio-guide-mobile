// Mocks generated by Mockito 5.4.6 from annotations
// in ethioguide/test/features/workspace_discussion/domain/usecases/add_comment_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:ethioguide/features/workspace_discussion/domain/entities/comment.dart'
    as _i7;
import 'package:ethioguide/features/workspace_discussion/domain/entities/community_stats.dart'
    as _i5;
import 'package:ethioguide/features/workspace_discussion/domain/entities/discussion.dart'
    as _i6;
import 'package:ethioguide/features/workspace_discussion/domain/repositories/workspace_discussion_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [WorkspaceDiscussionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockWorkspaceDiscussionRepository extends _i1.Mock
    implements _i3.WorkspaceDiscussionRepository {
  MockWorkspaceDiscussionRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<String, _i5.CommunityStats>> getCommunityStats() =>
      (super.noSuchMethod(
            Invocation.method(#getCommunityStats, []),
            returnValue:
                _i4.Future<_i2.Either<String, _i5.CommunityStats>>.value(
                  _FakeEither_0<String, _i5.CommunityStats>(
                    this,
                    Invocation.method(#getCommunityStats, []),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<String, _i5.CommunityStats>>);

  @override
  _i4.Future<_i2.Either<String, List<_i6.Discussion>>> getDiscussions({
    String? tag,
    String? category,
    String? filterType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#getDiscussions, [], {
              #tag: tag,
              #category: category,
              #filterType: filterType,
            }),
            returnValue:
                _i4.Future<_i2.Either<String, List<_i6.Discussion>>>.value(
                  _FakeEither_0<String, List<_i6.Discussion>>(
                    this,
                    Invocation.method(#getDiscussions, [], {
                      #tag: tag,
                      #category: category,
                      #filterType: filterType,
                    }),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<String, List<_i6.Discussion>>>);

  @override
  _i4.Future<_i2.Either<String, _i6.Discussion>> createDiscussion({
    required String? title,
    required String? content,
    required List<String>? tags,
    required String? category,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createDiscussion, [], {
              #title: title,
              #content: content,
              #tags: tags,
              #category: category,
            }),
            returnValue: _i4.Future<_i2.Either<String, _i6.Discussion>>.value(
              _FakeEither_0<String, _i6.Discussion>(
                this,
                Invocation.method(#createDiscussion, [], {
                  #title: title,
                  #content: content,
                  #tags: tags,
                  #category: category,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<String, _i6.Discussion>>);

  @override
  _i4.Future<_i2.Either<String, bool>> likeDiscussion(String? discussionId) =>
      (super.noSuchMethod(
            Invocation.method(#likeDiscussion, [discussionId]),
            returnValue: _i4.Future<_i2.Either<String, bool>>.value(
              _FakeEither_0<String, bool>(
                this,
                Invocation.method(#likeDiscussion, [discussionId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<String, bool>>);

  @override
  _i4.Future<_i2.Either<String, bool>> reportDiscussion(String? discussionId) =>
      (super.noSuchMethod(
            Invocation.method(#reportDiscussion, [discussionId]),
            returnValue: _i4.Future<_i2.Either<String, bool>>.value(
              _FakeEither_0<String, bool>(
                this,
                Invocation.method(#reportDiscussion, [discussionId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<String, bool>>);

  @override
  _i4.Future<_i2.Either<String, List<_i7.Comment>>> getComments(
    String? discussionId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#getComments, [discussionId]),
            returnValue:
                _i4.Future<_i2.Either<String, List<_i7.Comment>>>.value(
                  _FakeEither_0<String, List<_i7.Comment>>(
                    this,
                    Invocation.method(#getComments, [discussionId]),
                  ),
                ),
          )
          as _i4.Future<_i2.Either<String, List<_i7.Comment>>>);

  @override
  _i4.Future<_i2.Either<String, _i7.Comment>> addComment({
    required String? discussionId,
    required String? content,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#addComment, [], {
              #discussionId: discussionId,
              #content: content,
            }),
            returnValue: _i4.Future<_i2.Either<String, _i7.Comment>>.value(
              _FakeEither_0<String, _i7.Comment>(
                this,
                Invocation.method(#addComment, [], {
                  #discussionId: discussionId,
                  #content: content,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.Either<String, _i7.Comment>>);

  @override
  _i4.Future<_i2.Either<String, bool>> likeComment(String? commentId) =>
      (super.noSuchMethod(
            Invocation.method(#likeComment, [commentId]),
            returnValue: _i4.Future<_i2.Either<String, bool>>.value(
              _FakeEither_0<String, bool>(
                this,
                Invocation.method(#likeComment, [commentId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<String, bool>>);

  @override
  _i4.Future<_i2.Either<String, bool>> reportComment(String? commentId) =>
      (super.noSuchMethod(
            Invocation.method(#reportComment, [commentId]),
            returnValue: _i4.Future<_i2.Either<String, bool>>.value(
              _FakeEither_0<String, bool>(
                this,
                Invocation.method(#reportComment, [commentId]),
              ),
            ),
          )
          as _i4.Future<_i2.Either<String, bool>>);
}
