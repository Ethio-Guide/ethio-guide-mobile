// Mocks generated by Mockito 5.4.6 from annotations
// in ethioguide/test/features/workspace_discussion/presentation/bloc/workspace_discussion_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:ethioguide/features/workspace_discussion/domain/entities/comment.dart'
    as _i13;
import 'package:ethioguide/features/workspace_discussion/domain/entities/community_stats.dart'
    as _i6;
import 'package:ethioguide/features/workspace_discussion/domain/entities/discussion.dart'
    as _i8;
import 'package:ethioguide/features/workspace_discussion/domain/repositories/workspace_discussion_repository.dart'
    as _i2;
import 'package:ethioguide/features/workspace_discussion/domain/usecases/add_comment.dart'
    as _i14;
import 'package:ethioguide/features/workspace_discussion/domain/usecases/create_discussion.dart'
    as _i9;
import 'package:ethioguide/features/workspace_discussion/domain/usecases/get_comments.dart'
    as _i12;
import 'package:ethioguide/features/workspace_discussion/domain/usecases/get_community_stats.dart'
    as _i4;
import 'package:ethioguide/features/workspace_discussion/domain/usecases/get_discussions.dart'
    as _i7;
import 'package:ethioguide/features/workspace_discussion/domain/usecases/like_comment.dart'
    as _i15;
import 'package:ethioguide/features/workspace_discussion/domain/usecases/like_discussion.dart'
    as _i10;
import 'package:ethioguide/features/workspace_discussion/domain/usecases/report_comment.dart'
    as _i16;
import 'package:ethioguide/features/workspace_discussion/domain/usecases/report_discussion.dart'
    as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWorkspaceDiscussionRepository_0 extends _i1.SmartFake
    implements _i2.WorkspaceDiscussionRepository {
  _FakeWorkspaceDiscussionRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetCommunityStats].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetCommunityStats extends _i1.Mock implements _i4.GetCommunityStats {
  MockGetCommunityStats() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceDiscussionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceDiscussionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceDiscussionRepository);

  @override
  _i5.Future<_i3.Either<String, _i6.CommunityStats>> call() =>
      (super.noSuchMethod(
            Invocation.method(#call, []),
            returnValue:
                _i5.Future<_i3.Either<String, _i6.CommunityStats>>.value(
                  _FakeEither_1<String, _i6.CommunityStats>(
                    this,
                    Invocation.method(#call, []),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<String, _i6.CommunityStats>>);
}

/// A class which mocks [GetDiscussions].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetDiscussions extends _i1.Mock implements _i7.GetDiscussions {
  MockGetDiscussions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceDiscussionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceDiscussionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceDiscussionRepository);

  @override
  _i5.Future<_i3.Either<String, List<_i8.Discussion>>> call({
    String? tag,
    String? category,
    String? filterType,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #tag: tag,
              #category: category,
              #filterType: filterType,
            }),
            returnValue:
                _i5.Future<_i3.Either<String, List<_i8.Discussion>>>.value(
                  _FakeEither_1<String, List<_i8.Discussion>>(
                    this,
                    Invocation.method(#call, [], {
                      #tag: tag,
                      #category: category,
                      #filterType: filterType,
                    }),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<String, List<_i8.Discussion>>>);
}

/// A class which mocks [CreateDiscussion].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateDiscussion extends _i1.Mock implements _i9.CreateDiscussion {
  MockCreateDiscussion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceDiscussionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceDiscussionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceDiscussionRepository);

  @override
  _i5.Future<_i3.Either<String, _i8.Discussion>> call({
    required String? title,
    required String? content,
    required List<String>? tags,
    required String? category,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #title: title,
              #content: content,
              #tags: tags,
              #category: category,
            }),
            returnValue: _i5.Future<_i3.Either<String, _i8.Discussion>>.value(
              _FakeEither_1<String, _i8.Discussion>(
                this,
                Invocation.method(#call, [], {
                  #title: title,
                  #content: content,
                  #tags: tags,
                  #category: category,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Either<String, _i8.Discussion>>);
}

/// A class which mocks [LikeDiscussion].
///
/// See the documentation for Mockito's code generation for more information.
class MockLikeDiscussion extends _i1.Mock implements _i10.LikeDiscussion {
  MockLikeDiscussion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceDiscussionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceDiscussionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceDiscussionRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(String? discussionId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [discussionId]),
            returnValue: _i5.Future<_i3.Either<String, bool>>.value(
              _FakeEither_1<String, bool>(
                this,
                Invocation.method(#call, [discussionId]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<String, bool>>);
}

/// A class which mocks [ReportDiscussion].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportDiscussion extends _i1.Mock implements _i11.ReportDiscussion {
  MockReportDiscussion() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceDiscussionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceDiscussionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceDiscussionRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(String? discussionId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [discussionId]),
            returnValue: _i5.Future<_i3.Either<String, bool>>.value(
              _FakeEither_1<String, bool>(
                this,
                Invocation.method(#call, [discussionId]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<String, bool>>);
}

/// A class which mocks [GetComments].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetComments extends _i1.Mock implements _i12.GetComments {
  MockGetComments() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceDiscussionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceDiscussionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceDiscussionRepository);

  @override
  _i5.Future<_i3.Either<String, List<_i13.Comment>>> call(
    String? discussionId,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [discussionId]),
            returnValue:
                _i5.Future<_i3.Either<String, List<_i13.Comment>>>.value(
                  _FakeEither_1<String, List<_i13.Comment>>(
                    this,
                    Invocation.method(#call, [discussionId]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<String, List<_i13.Comment>>>);
}

/// A class which mocks [AddComment].
///
/// See the documentation for Mockito's code generation for more information.
class MockAddComment extends _i1.Mock implements _i14.AddComment {
  MockAddComment() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceDiscussionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceDiscussionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceDiscussionRepository);

  @override
  _i5.Future<_i3.Either<String, _i13.Comment>> call({
    required String? discussionId,
    required String? content,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#call, [], {
              #discussionId: discussionId,
              #content: content,
            }),
            returnValue: _i5.Future<_i3.Either<String, _i13.Comment>>.value(
              _FakeEither_1<String, _i13.Comment>(
                this,
                Invocation.method(#call, [], {
                  #discussionId: discussionId,
                  #content: content,
                }),
              ),
            ),
          )
          as _i5.Future<_i3.Either<String, _i13.Comment>>);
}

/// A class which mocks [LikeComment].
///
/// See the documentation for Mockito's code generation for more information.
class MockLikeComment extends _i1.Mock implements _i15.LikeComment {
  MockLikeComment() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceDiscussionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceDiscussionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceDiscussionRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(String? commentId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [commentId]),
            returnValue: _i5.Future<_i3.Either<String, bool>>.value(
              _FakeEither_1<String, bool>(
                this,
                Invocation.method(#call, [commentId]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<String, bool>>);
}

/// A class which mocks [ReportComment].
///
/// See the documentation for Mockito's code generation for more information.
class MockReportComment extends _i1.Mock implements _i16.ReportComment {
  MockReportComment() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceDiscussionRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceDiscussionRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceDiscussionRepository);

  @override
  _i5.Future<_i3.Either<String, bool>> call(String? commentId) =>
      (super.noSuchMethod(
            Invocation.method(#call, [commentId]),
            returnValue: _i5.Future<_i3.Either<String, bool>>.value(
              _FakeEither_1<String, bool>(
                this,
                Invocation.method(#call, [commentId]),
              ),
            ),
          )
          as _i5.Future<_i3.Either<String, bool>>);
}
